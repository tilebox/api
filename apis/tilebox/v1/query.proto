edition = "2023";

package tilebox.v1;

import "google/protobuf/go_features.proto";
import "google/protobuf/timestamp.proto";
import "tilebox/v1/id.proto";

option features.(pb.go).api_level = API_OPAQUE;
option features.field_presence = IMPLICIT;

// A time interval
message TimeInterval {
  // Start time of the interval.
  google.protobuf.Timestamp start_time = 1;
  // End time of the interval.
  google.protobuf.Timestamp end_time = 2;

  // We use exclusive for start and inclusive for end, because that way when both are false
  // we have a half-open interval [start, end) which is the default behaviour we want to achieve.
  // Flag indicating whether the start time is exclusive. If true, the start time is not included in the interval.
  bool start_exclusive = 3;
  // Flag indicating whether the end time is inclusive. If true, the end time is included in the interval.
  bool end_inclusive = 4;
}

// An ID interval
message IDInterval {
  // The id of the first data point in the interval.
  tilebox.v1.ID start_id = 1;
  // The id of the last data point in the interval.
  tilebox.v1.ID end_id = 2;

  // We use exclusive for start and inclusive for end, because that way when both are false
  // we have a half-open interval [start, end) which is the default behaviour we want to achieve.
  // Flag indicating whether the start id is exclusive.
  // If true, the datapoint with the given start id is not included in the interval.
  bool start_exclusive = 3;
  // Flag indicating whether the end id is inclusive.
  // If true, the datapoint with the given end id is included in the interval.
  bool end_inclusive = 4;
}

// Pagination information for paginated queries
message Pagination {
  // The maximum number of entries to return.
  int64 limit = 1 [features.field_presence = EXPLICIT];
  // Return entries starting after this entry.
  // This is the id of the last entry returned in the previous page as the next parameter in each paginated query.
  tilebox.v1.ID starting_after = 2 [features.field_presence = EXPLICIT];
}
