// The externally facing API allowing users to interact with jobs.

edition = "2023";

package workflows.v1;

import "buf/validate/validate.proto";
import "tilebox/v1/id.proto";
import "tilebox/v1/query.proto";
import "workflows/v1/core.proto";
import "workflows/v1/diagram.proto";

option features.field_presence = IMPLICIT;

// SubmitJobRequest submits and schedules a job for execution. The job can have multiple root tasks.
message SubmitJobRequest {
  // The root tasks for the job.
  repeated TaskSubmission tasks = 1 [(buf.validate.field).repeated = {
    min_items: 1
    max_items: 64
  }];
  // The name of the job.
  string job_name = 2 [(buf.validate.field).string.min_len = 1];
  // Tracing information for the job. This is used to propagate tracing information to the workers that execute the job.
  string trace_parent = 3 [(buf.validate.field).string.min_len = 1];
  // Optional. The ID of the automation that submits this job.
  tilebox.v1.ID automation_id = 4;
}

// GetJobRequest requests details for a job.
message GetJobRequest {
  // The ID of the job to get details for.
  tilebox.v1.ID job_id = 1 [(buf.validate.field).required = true];
}

// GetJobProgressRequest requests a jobs progress. It returns a full job object, but only
// partially filled with progress indicators, job state and a started_at timestamp.
message GetJobProgressRequest {
  // The ID of the job to get progress for.
  tilebox.v1.ID job_id = 1 [(buf.validate.field).required = true];
}

// RetryJobRequest requests a retry of a job that has failed.
message RetryJobRequest {
  // The job to retry.
  tilebox.v1.ID job_id = 1 [(buf.validate.field).required = true];
}

// RetryJobResponse is the response to a RetryJobRequest.
message RetryJobResponse {
  // The number of tasks that were rescheduled.
  int64 num_tasks_rescheduled = 1;
}

// CancelJobRequest requests a cancel of a job.
message CancelJobRequest {
  // The job to cancel.
  tilebox.v1.ID job_id = 1 [(buf.validate.field).required = true];
}

// CancelJobResponse is the response to a CancelJobRequest.
message CancelJobResponse {
  // no fields at the moment
}

// The theme in which to render a workflow diagram
enum WorkflowDiagramTheme {
  WORKFLOW_DIAGRAM_THEME_UNSPECIFIED = 0;
  WORKFLOW_DIAGRAM_THEME_LIGHT = 1;
  WORKFLOW_DIAGRAM_THEME_DARK = 2;
  WORKFLOW_DIAGRAM_THEME_CONSOLE_LIGHT = 3;
  WORKFLOW_DIAGRAM_THEME_CONSOLE_DARK = 4;
}

// VisualizeJobRequest requests a visualization of a job.
message VisualizeJobRequest {
  // The job to visualize.
  tilebox.v1.ID job_id = 1 [(buf.validate.field).required = true];

  // The options for rendering the diagram
  RenderOptions render_options = 2;

  // The theme to render the workflow diagram in
  WorkflowDiagramTheme theme = 3;

  // whether to include the job name as title in the diagram
  bool include_job_name = 4;
}

// QueryFilters contains the filters to apply to a query.
message QueryFilters {
  option (buf.validate.message).oneof = {
    fields: [
      "time_interval",
      "id_interval"
    ]
    required: true
  };

  tilebox.v1.TimeInterval time_interval = 1;
  tilebox.v1.IDInterval id_interval = 2;

  // Filter jobs by automation id.
  tilebox.v1.ID automation_id = 3 [features.field_presence = EXPLICIT];
}

// QueryJobsRequest requests a list of jobs.
message QueryJobsRequest {
  // Filters to apply to the query.
  QueryFilters filters = 1;
  // The pagination parameters for this request.
  tilebox.v1.Pagination page = 2 [features.field_presence = EXPLICIT];
}

// A list of jobs.
message QueryJobsResponse {
  // The jobs.
  repeated Job jobs = 1;
  // The pagination parameters for the next page.
  tilebox.v1.Pagination next_page = 3 [features.field_presence = EXPLICIT];
}

// GetJobPrototypeRequest requests a clone prototype of a job.
message GetJobPrototypeRequest {
  // The ID of the job to get a clone prototype for.
  tilebox.v1.ID job_id = 1 [(buf.validate.field).required = true];
}

// A clone prototype of a job.
message GetJobPrototypeResponse {
  // The root tasks of the job.
  repeated TaskSubmission root_tasks = 1;
  // The name of the job.
  string job_name = 2;
}

// CloneJobRequest requests a clone of a job.
message CloneJobRequest {
  // The ID of the job to clone.
  tilebox.v1.ID job_id = 1 [(buf.validate.field).required = true];
  // The updated root tasks of the job.
  repeated TaskSubmission root_tasks_overrides = 2 [(buf.validate.field).repeated = {
    min_items: 1
    max_items: 64
  }];
  // The name of the job.
  string job_name = 3 [(buf.validate.field).string.min_len = 1];
}

// A service for interacting with jobs.
service JobService {
  rpc SubmitJob(SubmitJobRequest) returns (Job);
  rpc GetJob(GetJobRequest) returns (Job);
  rpc GetJobProgress(GetJobProgressRequest) returns (Job);
  rpc RetryJob(RetryJobRequest) returns (RetryJobResponse);
  rpc CancelJob(CancelJobRequest) returns (CancelJobResponse);
  rpc VisualizeJob(VisualizeJobRequest) returns (Diagram);
  rpc QueryJobs(QueryJobsRequest) returns (QueryJobsResponse);
  rpc GetJobPrototype(GetJobPrototypeRequest) returns (GetJobPrototypeResponse);
  rpc CloneJob(CloneJobRequest) returns (Job);
}
