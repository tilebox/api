/*
   Core message type definitions for the Tilebox datasets API.

   Conventions:
   - A dataset is a set of data points of the same type.
   - A single data point (entry) is referred to in all messages as datapoint.
   - Data points for a single dataset are grouped into collections.

   - All time fields use the google.protobuf.Timestamp message type.

   - When a wrapper message is needed to return a list of a given message type, use the pluralized message name
     - e.g. message Collections contains a list of Collection messages.
*/

edition = "2023";

package datasets.v1;

import "datasets/v1/dataset_type.proto";
// https://protobuf.dev/reference/protobuf/google.protobuf/#timestamp
import "google/protobuf/timestamp.proto";
import "tilebox/v1/id.proto";
import "tilebox/v1/query.proto";

option features.field_presence = IMPLICIT;

// LegacyPagination - used for backwards compatibility, will be removed as soon as all datasets are migrated
message LegacyPagination {
  // The maximum number of entries to return.
  int64 limit = 1 [features.field_presence = EXPLICIT];
  // Return entries starting after this entry.
  // This is the id of the last entry returned in the previous page as the next parameter in each paginated query.
  string starting_after = 2 [features.field_presence = EXPLICIT];
}

// Any is a message that can hold any other message as bytes.
// We don't use google.protobuf.Any because we want the JSON representation of the value field to be bytes.
message Any {
  string type_url = 1;
  // Must be a valid serialized protocol buffer of the above specified type.
  bytes value = 2;
}

// RepeatedAny is a message holding a list of messages, that all share the same variable message type.
// It is preferable over a repeated Any field because it avoids repeating the type_url for every single element.
message RepeatedAny {
  string type_url = 1;
  // Must be a valid serialized protocol buffer of the above specified type.
  repeated bytes value = 2;
}

/*
 * Messages relevant for all Tilebox datasets
 */

// DatapointMetadata contains the metadata for a single data point.
// legacy, only relevant for old endpoints
message DatapointMetadata {
  google.protobuf.Timestamp event_time = 1; // The time the message was received by the on-board computer.
  google.protobuf.Timestamp ingestion_time = 2; // The time the message was ingested by Tilebox.
  string id = 3 [features.field_presence = EXPLICIT]; // The external id of the datapoint.
}

// Datapoints is a list of datapoints in a Tilebox dataset, with all data points sharing the same type.
message Datapoints {
  repeated DatapointMetadata meta = 1; // A metadata for a datapoint.
  RepeatedAny data = 2; // The datapoints.
}

// DatapointPage is a single page of data points of a Tilebox dataset, such as it is returned by a ForInterval query
message DatapointPage {
  repeated DatapointMetadata meta = 1; // A metadata for a datapoint.
  RepeatedAny data = 2; // The datapoints.
  LegacyPagination next_page = 3 [features.field_presence = EXPLICIT]; // The pagination parameters for the next page.
}

// Datapoint is a single datapoint in a Tilebox Dataset
message Datapoint {
  DatapointMetadata meta = 1; // A metadata for a datapoint.
  Any data = 2; // The data.
}

// Collection contains basic information about a dataset collection
message Collection {
  string legacy_id = 1; // Here for backwards compatibility, to be removed in the future.
  string name = 2;
  tilebox.v1.ID id = 3;
}

// CollectionInfo contains information about the data available in a dataset collection
message CollectionInfo {
  Collection collection = 1;
  tilebox.v1.TimeInterval availability = 2 [features.field_presence = EXPLICIT]; // The time interval for which data is available.
  uint64 count = 3 [features.field_presence = EXPLICIT]; // Number of entries in the dataset.
}

// CollectionInfos contains a list of CollectionInfo messages.
message CollectionInfos {
  repeated CollectionInfo data = 1;
}

// Dataset contains information about a single dataset
message Dataset {
  // dataset id
  tilebox.v1.ID id = 1;
  // the dataset group to which this dataset belongs
  tilebox.v1.ID group_id = 2;
  // the type of the dataset
  AnnotatedType type = 3;
  // normalized snake case name of the dataset, which can be used as a valid code identifier
  string code_name = 4;
  // display name of the dataset
  string name = 5;
  // summary of the dataset
  string summary = 6;
  // optional icon of the dataset
  string icon = 7;
  // description of the dataset, in markdown format
  string description = 8;
  // permissions of the requesting user on the dataset
  repeated DatasetPermission permissions = 10;
  // visibility of the requesting user on the dataset
  Visibility visibility = 11;
  // complete slug of the dataset
  string slug = 12;
  // true if the dataset type is editable
  bool type_editable = 13;
}

// DatasetPermission is a permission a user (as part of an org) can have on a dataset
enum DatasetPermission {
  DATASET_PERMISSION_UNSPECIFIED = 0;
  DATASET_PERMISSION_ACCESS_DATA = 1;
  DATASET_PERMISSION_WRITE_DATA = 2;
  DATASET_PERMISSION_EDIT = 3;
}

// Visibility is a visibility a user (as part of an org) can have on a dataset
enum Visibility {
  VISIBILITY_UNSPECIFIED = 0;
  VISIBILITY_PRIVATE = 1;
  VISIBILITY_SHARED_WITH_ME = 2;
  VISIBILITY_PUBLIC = 3;
}

// DatasetGroup represent a dataset group
message DatasetGroup {
  // group id
  tilebox.v1.ID id = 1;
  // optional parent group id
  tilebox.v1.ID parent_id = 2;
  // normalized snake case name of the dataset group, which can be used as a valid code identifier
  string code_name = 3;
  // display name of the group
  string name = 4;
  // optional icon of the group
  string icon = 5;
}
